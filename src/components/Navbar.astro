---
// Add any necessary imports here
import CartPanel from './CartPanel.astro';

interface Props {
	isTransparent?: boolean;
}

const { isTransparent = false } = Astro.props;

// Fetch cart items
const url = "https://commerce-tarframework.turso.io/v2/pipeline";
const authToken = "eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJhIjoicnciLCJpYXQiOjE3Mjk2NzQwNjQsImlkIjoiN2ZiNTFhMTgtYjU1My00Y2M2LTkwZWItZDE0ZTcxNDI5ODlhIn0.zxIjODPlBzNcAgQQ70xZj2sI7j7RSAHpYPQUtvyoAHDb4nLGzHAPiVvnJ6qeK7-00F8A6Lz__CSPjdITPZ31BQ";

let cartItems = [];
let error = null;

try {
  const response = await fetch(url, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${authToken}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      requests: [
        { 
          type: "execute", 
          stmt: { 
            sql: "SELECT * FROM cart",
          } 
        },
        { type: "close" },
      ],
    }),
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  const data = await response.json();
  console.log('Raw API response:', JSON.stringify(data, null, 2));

  if (data && data.results && data.results[0] && data.results[0].response && data.results[0].response.result && data.results[0].response.result.rows) {
    cartItems = data.results[0].response.result.rows.map((row: any) => ({
      id: row[0].value,
      userid: row[1].value,
      productId: row[2].value,
      name: row[3].value,
      price: parseFloat(row[4].value),
      quantity: parseInt(row[5].value),
    }));
  } else {
    console.error('Unexpected data structure:', data);
    throw new Error('Unexpected data structure from API');
  }
} catch (e) {
  console.error('Error fetching cart items:', e);
  error = e instanceof Error ? e.message : 'An unknown error occurred';
}
---

<nav class={`antialiased fixed top-0 left-0 right-0 z-50 transition-colors duration-300 ${isTransparent ? 'bg-transparent' : 'bg-black'}`}>
  <div class="max-w-screen-xl px-4 mx-auto 2xl:px-0 py-4">
    <div class="flex items-center justify-between">

      <div class="flex items-center space-x-8">
        <div class="shrink-0">
          <a href="#" title="" class="text-2xl font-bold text-white hover:text-primary-500 transition-colors">
            VIBAASH
          </a>
        </div>

        <ul class="hidden lg:flex items-center justify-start gap-6 md:gap-8 py-3 sm:justify-center">
          <li>
            <a href="#" title="" class="flex text-sm font-medium text-white hover:text-primary-500 transition-colors">
              Home
            </a>
          </li>
          <li class="shrink-0">
            <a href="#" title="" class="flex text-sm font-medium text-white hover:text-primary-500 transition-colors">
              Best Sellers
            </a>
          </li>
          <li class="shrink-0">
            <a href="#" title="" class="flex text-sm font-medium text-white hover:text-primary-500 transition-colors">
              Gift Ideas
            </a>
          </li>
          <li class="shrink-0">
            <a href="#" title="" class="text-sm font-medium text-white hover:text-primary-500 transition-colors">
              Today's Deals
            </a>
          </li>
        </ul>
      </div>

      <div class="flex items-center lg:space-x-2">
        <button id="cartButton" type="button" class="inline-flex items-center rounded-lg justify-center p-2 hover:bg-white/10 text-sm font-medium leading-none text-white">
          <span class="sr-only">Cart</span>
          <svg class="w-5 h-5 lg:me-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 4h1.5L9 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-8.5-3h9.25L19 7H7.312"/>
          </svg> 
          <span class="hidden sm:flex">My Cart</span>
        </button>

        <div id="myCartDropdown1" class="hidden z-10 mx-auto max-w-sm space-y-4 overflow-hidden rounded-lg bg-white p-4 antialiased shadow-lg dark:bg-gray-800">
          <!-- Cart dropdown content -->
        </div>

        <button id="userDropdownButton1" data-dropdown-toggle="userDropdown1" type="button" class="inline-flex items-center rounded-lg justify-center p-2 hover:bg-white/10 text-sm font-medium leading-none text-white">
          <svg class="w-5 h-5 me-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
            <path stroke="currentColor" stroke-width="2" d="M7 17v1a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1a3 3 0 0 0-3-3h-4a3 3 0 0 0-3 3Zm8-9a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"/>
          </svg>              
          Account
          <svg class="w-4 h-4 text-white ms-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 9-7 7-7-7"/>
          </svg> 
        </button>

        <div id="userDropdown1" class="hidden z-10 w-56 divide-y divide-gray-100 overflow-hidden overflow-y-auto rounded-lg bg-white antialiased shadow dark:divide-gray-600 dark:bg-gray-700">
          <!-- User dropdown content -->
        </div>

        <button type="button" data-collapse-toggle="ecommerce-navbar-menu-1" aria-controls="ecommerce-navbar-menu-1" aria-expanded="false" class="inline-flex lg:hidden items-center justify-center hover:bg-white/10 rounded-md p-2 text-white">
          <span class="sr-only">
            Open Menu
          </span>
          <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
            <path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5 7h14M5 12h14M5 17h14"/>
          </svg>                
        </button>
      </div>
    </div>

    <div id="ecommerce-navbar-menu-1" class="bg-white/10 backdrop-blur-md border border-white/20 rounded-lg py-3 hidden px-4 mt-4">
      <ul class="text-white text-sm font-medium space-y-3">
        <li>
          <a href="#" class="hover:text-primary-500 transition-colors">Home</a>
        </li>
        <li>
          <a href="#" class="hover:text-primary-500 transition-colors">Best Sellers</a>
        </li>
        <li>
          <a href="#" class="hover:text-primary-500 transition-colors">Gift Ideas</a>
        </li>
        <li>
          <a href="#" class="hover:text-primary-500 transition-colors">Games</a>
        </li>
        <li>
          <a href="#" class="hover:text-primary-500 transition-colors">Electronics</a>
        </li>
        <li>
          <a href="#" class="hover:text-primary-500 transition-colors">Home & Garden</a>
        </li>
      </ul>
    </div>
  </div>
</nav>

<CartPanel />

<style>
  .navbar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000;
    background-color: transparent;
    transition: background-color 0.3s ease;
  }

  .navbar-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .logo img {
    height: 40px;
    width: auto;
  }

  ul {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
  }

  li {
    margin-left: 1.5rem;
  }

  a {
    color: white;
    text-decoration: none;
    font-size: 1rem;
    transition: color 0.3s ease;
  }

  a:hover {
    color: #007bff;
  }

  /* Optional: Add a background color when scrolling */
  .navbar.scrolled {
    background-color: rgba(0, 0, 0, 0.8);
  }
</style>

<script define:vars={{ cartItems, error }}>
  const cartButton = document.getElementById('cartButton');
  const cartPanel = document.getElementById('cartPanel');
  const closeCartButton = document.getElementById('closeCart');

  cartButton.addEventListener('click', () => {
    cartPanel.classList.remove('translate-x-full');
    displayCartItems(cartItems);
  });

  closeCartButton.addEventListener('click', () => {
    cartPanel.classList.add('translate-x-full');
  });

  function displayCartItems(items) {
    const cartItemsContainer = document.getElementById('cartItems');
    cartItemsContainer.innerHTML = '';
    if (error) {
      cartItemsContainer.innerHTML = `<p class="text-red-500">Error: ${error}</p>`;
    } else if (items.length === 0) {
      cartItemsContainer.innerHTML = '<p>Your cart is empty.</p>';
    } else {
      items.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.className = 'flex items-center justify-between py-2';
        itemElement.innerHTML = `
          <span>${item.name}</span>
          <span>Quantity: ${item.quantity}</span>
          <span>â‚¹${item.price.toLocaleString()}</span>
        `;
        cartItemsContainer.appendChild(itemElement);
      });
    }
  }

  // Optional: Update navbar background on scroll
  const navbar = document.querySelector('nav');
  const hero = document.querySelector('.hero');

  function updateNavbarBackground() {
    if (hero && navbar) {
      const heroBottom = hero.getBoundingClientRect().bottom;
      if (heroBottom <= 0) {
        navbar.classList.remove('bg-transparent');
        navbar.classList.add('bg-black');
      } else {
        navbar.classList.remove('bg-black');
        navbar.classList.add('bg-transparent');
      }
    }
  }

  if (navbar.classList.contains('bg-transparent')) {
    window.addEventListener('scroll', updateNavbarBackground);
    window.addEventListener('resize', updateNavbarBackground);
    updateNavbarBackground(); // Initial call
  }
</script>
